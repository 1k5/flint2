/*=============================================================================

    This file is part of FLINT.

    FLINT is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.

    FLINT is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with FLINT; if not, write to the Free Software
    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301 USA

=============================================================================*/
/******************************************************************************

    Copyright (C) 2011 Fredrik Johansson

******************************************************************************/

*******************************************************************************

    Factoring integers 

    An integer may be represented in factored form using the 
    \code{fmpz_factor_t} data structure. This consists of two \code{fmpz} 
    vectors representing bases and exponents, respectively. Canonically, 
    the bases will be prime numbers sorted in ascending order and the 
    exponents will be positive.

    A separate \code{int} field holds the sign, which may be $-1$, $0$ or $1$.

*******************************************************************************

void fmpz_factor_init(fmpz_factor_t factor)

    Initialises an \code{fmpz_factor_t} structure.

void fmpz_factor_clear(fmpz_factor_t factor)

    Clears an \code{fmpz_factor_t} structure.

void _fmpz_factor_append_ui(fmpz_factor_t factor, mp_limb_t p, ulong exp)

    Append a factor $p$ to the given exponent to the 
    \code{fmpz_factor_t} structure \code{factor}.

void _fmpz_factor_append(fmpz_factor_t factor, fmpz_t p, ulong exp)

    Append a factor $p$ to the given exponent to the 
    \code{fmpz_factor_t} structure \code{factor}.

void fmpz_factor(fmpz_factor_t factor, const fmpz_t n)

    Factors $n$ into prime numbers. If $n$ is zero or negative, the
    sign field of the \code{factor} object will be set accordingly.

    This currently only uses trial division, falling back to \code{n_factor()}
    as soon as the number shrinks to a single limb.

void fmpz_factor_si(fmpz_factor_t factor, slong n)

    Like \code{fmpz_factor}, but takes a machine integer $n$ as input.

int fmpz_factor_trial_range(fmpz_factor_t factor, const fmpz_t n, 
                                       ulong start, ulong num_primes)

    Factors $n$ into prime factors using trial division. If $n$ is 
    zero or negative, the sign field of the \code{factor} object will be 
    set accordingly.

    The algorithm starts with the given start index in the \code{flint_primes}
    table and uses at most \code{num_primes} primes from that point. 

    The function returns 1 if $n$ is completely factored, otherwise it returns
    $0$.

void fmpz_factor_expand_iterative(fmpz_t n, const fmpz_factor_t factor)

    Evaluates an integer in factored form back to an \code{fmpz_t}.

    This currently exponentiates the bases separately and multiplies
    them together one by one, although much more efficient algorithms
    exist. 

int fmpz_factor_pp1(fmpz_t factor, const fmpz_t n, 
                                             ulong B1, ulong B2_sqrt, ulong c)

    Use Williams' $p + 1$ method to factor $n$, using a prime bound in
    stage 1 of \code{B1} and a prime limit in stage 2 of at least the square 
    of \code{B2_sqrt}. If a factor is found, the function returns $1$ and 
    \code{factor} is set to the factor that is found. Otherwise, the function 
    returns $0$.

    The value $c$ should be a random value greater than $2$. Successive 
    calls to the function with different values of $c$ give additional 
    chances to factor $n$ with roughly exponentially decaying probability 
    of finding a factor which has been missed (if $p+1$ or $p-1$ is not
    smooth for any prime factors $p$ of $n$ then the function will
    not ever succeed).

int fmpz_factor_pollard_brent_single(fmpz_t p_factor, fmpz_t n_in, fmpz_t yi, 
                                     fmpz_t ai, mp_limb_t max_iters)

    Pollard Rho algorithm for integer factorization. Assumes that the $n$ is
    not prime. $factor$ is set as the factor if found. Takes as input the initial
    value $y$, to start polynomial evaluation and $a$, the constant of the polynomial
    used. It is not assured that the factor found will be prime. Does not compute 
    the complete factorization, just one factor. Returns the number of limbs of 
    factor if factorization is successfull (non trivial factor is found), else returns 0. 

    $max_iters$ is the number of iterations tried in process of finding the cycle. 
    If the algorithm fails to find a non trivial factor in one call, it tries again 
    (this time with a different set of random values). 
    
int fmpz_factor_pollard_brent(fmpz_t factor, flint_rand_t state, fmpz_t n, 
                              mp_limb_t max_tries, mp_limb_t max_iters)

    Pollard Rho algorithm for integer factorization. Assumes that the $n$ is
    not prime. $factor$ is set as the factor if found. It is not assured that the 
    factor found will be prime. Does not compute the complete factorization, 
    just one factor. Returns the number of limbs of factor if factorization is 
    successfull (non trivial factor is found), else returns 0. 

    $max_iters$ is the number of iterations tried in process of finding the cycle. 
    If the algorithm fails to find a non trivial factor in one call, it tries again 
    (this time with a different set of random values). This process is repeated a 
    maximum of $max_tries$ times. 

    The algorithm used is a modification of the original Pollard Rho algorithm,
    suggested by Richard Brent. It can be found in the paper availible at
    http://maths-people.anu.edu.au/~brent/pd/rpb051i.pdf 

************************************ ECM FUNTIONS  ************************************


/* ECM Factoring functions ***************************************************/

typedef struct ecm_s {

    fmpz_t t, u, v, w;      /* temp variables */
    fmpz_t x, z;            /* the coordinates */
    fmpz_t a24;             /* value (a + 2)/4 */

    uint8_t *GCD_table;     /* checks whether baby step int is
                               coprime to Primorial or not */

    uint8_t **prime_table;  /* checks whether i*P + j is prime 
                               or not */
} ecm_s;

void fmpz_factor_ecm_init(ecm_t ecm_inf)
    
    Initializes the ecm struct

void fmpz_factor_ecm_clear(ecm_t ecm_inf)

    Clears the ecm struct

void fmpz_factor_ecm_double(fmpz_t x, fmpz_t z, fmpz_t x0, fmpz_t z0, fmpz_t n,
                            ecm_t ecm_inf)

    Sets the point [x :: z] to two times [x0 :: z0] according to the formula

        x = (x0 + z0)^2 * (x0 - z0)^2 mod n
        z = 4 * x0 * z0 * ((x0 - z0)^2 + a24 * 4 * x0 * z0) mod n

    ecm_inf is used just to use temp fmpz_t's in the structure. This group doubling
    is valid only for points expressed in MONTGOMERY PROJECTIVE coordinates.

void fmpz_factor_ecm_add(fmpz_t x, fmpz_t z, fmpz_t x1, fmpz_t z1, fmpz_t x2,
                         fmpz_t z2, fmpz_t x0, fmpz_t z0, fmpz_t n, ecm_t ecm_inf)

    Sets the point [x :: z] to the sum of [x1 :: z1] and [x2 :: z2], given the
    difference [x0 :: z0] according to the formula

        x = 4 * z0 * (x1 * x2 - z1 * z2)^2 mod n
        z = 4 * x0 * (x2 * z1 - x1 * z2)^2 mod n

    ecm_inf is used just to use temp fmpz_t's in the structure. This group 
    addition is valid only for points expressed in MONTGOMERY PROJECTIVE 
    coordinates.

void fmpz_factor_ecm_mul_montgomery_ladder(fmpz_t x, fmpz_t z, fmpz_t x0, 
                                           fmpz_t z0, fmpz_t k, fmpz_t n,
                                           ecm_t ecm_inf)

    Montgomery ladder algorithm for scalar multiplication of elliptic points. 

    Sets the point [x :: z] to k[x0 :: z0] (mod n).

    ecm_inf is used just to use temp fmpz_t's in the structure. Valid only for 
    points expressed in MONTGOMERY PROJECTIVE coordinates.

int fmpz_factor_ecm_select_curve(fmpz_t f, fmpz_t sig, fmpz_t n, ecm_t ecm_inf)

    Selects a random elliptic curve given a random integer sigma, according to 
    Suyama's parameterization. If in case factor is found while selecting the 
    curve, 1 is returned.

    Also selects the initial point x0, and the value of a24 (a + 2)/4, where a 
    is a curve parameter. Sets z0 as 1. All these are stored in the ecm struct.

    The curve selected is of montgomery form, the points selected satisfy the
    curve and are projective coordinates.

int fmpz_factor_ecm_stage_I(fmpz_t f, const mp_limb_t *prime_array, mp_limb_t num,
                            mp_limb_t B1, fmpz_t n, ecm_t ecm_inf)

    Stage I implementation of the ECM algorithm.
    
    f is set as the factor if found. 
    num is number of prime numbers <= the bound B1.
    prime_array is an array of first B1 primes.
    n is the number being factored.

    If the factor is found, one is returned, otherwise 0.

int fmpz_factor_ecm_stage_II_one(fmpz_t f, mp_limb_t B1, mp_limb_t B2, mp_limb_t P,
                                 fmpz_t n, ecm_t ecm_inf)

    Stage II implementation of the ECM algorithm (older version).

    f is set as the factor if found. 
    B1, B2 are the two bounds.
    P is the primorial (approximately equal to B2^0.5).
    n is the number being factored.

    If the factor is found, one is returned, otherwise 0.

int fmpz_factor_ecm_stage_II_two(fmpz_t f, mp_limb_t B1, mp_limb_t B2, mp_limb_t P,
                                 fmpz_t n, ecm_t ecm_inf)

    Stage II implementation of the ECM algorithm (newer version).

    f is set as the factor if found. 
    B1, B2 are the two bounds.
    P is the primorial (approximately equal to B2^0.25).
    n is the number being factored.

    If the factor is found, one is returned, otherwise 0.


int fmpz_factor_ecm_one(fmpz_t f, mp_limb_t curves, mp_limb_t B1, mp_limb_t B2,
                        flint_rand_t state, fmpz_t n)

    Outer wrapper function for the ECM algorithm. Calls stage I and II (one), and
    the precomputations (builds prime_array for stage I, GCD_table and
    prime_table for stage II).

    f is set as the factor if found.
    curves is the number of random curves being tried.
    B1, B2 are the two bounds or stage I and stage II.
    n is the number being factored.

    If a factor is found, 1 is returned. Otherwise 0 is returned.

int fmpz_factor_ecm_two(fmpz_t f, mp_limb_t curves, mp_limb_t B1, mp_limb_t B2,
                        flint_rand_t state, fmpz_t n);

    Outer wrapper function for the ECM algorithm. Calls stage I and II (two), and
    the precomputations (builds prime_array for stage I, GCD_table and
    prime_table for stage II).

    f is set as the factor if found.
    curves is the number of random curves being tried.
    B1, B2 are the two bounds or stage I and stage II.
    n is the number being factored.

    If a factor is found, 1 is returned. Otherwise 0 is returned.

      