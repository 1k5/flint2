/*=============================================================================

    This file is part of FLINT.

    FLINT is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.

    FLINT is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with FLINT; if not, write to the Free Software
    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301 USA

=============================================================================*/
/******************************************************************************

    Copyright (C) 2015 Vladimir Glazachev

******************************************************************************/

*******************************************************************************

    Preparation functions

*******************************************************************************

mp_ptr f_table(const ulong q)

    Returns a table of the function $f: \{1,2,...,q-2\}\rightarrow\{1,2,...,q-2\}$
    defined by $1 - g^x \equiv  gf(x) \bmod q$, 
    there $g$ is a primitive root modulo $q$. f_table[x - 1] = f(x).


*******************************************************************************

    Operations in $\mathbb{Z}[\zeta_q, \zeta_p] / (n)$.

*******************************************************************************

void unity_zpq_init(unity_zpq value, ulong q, ulong p, const fmpz_t n)

    Initialized \code{unity_zpq} element of $\mathbb{Z}[\zeta_q, \zeta_p] / (n)$.
    \code{unity_zpq} is an array of fmpz_mod_poly_t elements.

void unity_zpq_clear(unity_zpq value)

    Clears the given \code{unity_zpq} element. It must be reinitialised in
    order to be used again.

void unity_zpq_copy(unity_zpq f, const unity_zpq g)

    Sets $f$ to $g$. $f$ and $g$ must be initialized with same $p$, $q$ and $n$.

void unity_zpq_swap(unity_zpq f, unity_zpq q)

    Swaps $f$ and $g$. $f$ and $g$ must be initialized with same $p$, $q$ and $n$.

int unity_zpq_equal(const unity_zpq f, const unity_zpq g)

    Returns non zero value if $f == g$.

void unity_zpq_coeff_set_fmpz(unity_zpq value, ulong i, ulong j, const fmpz_t x)

    Sets the coefficient of the $\zeta_q^i*\zeta_p^j$ equal to x.
    \code{i} must be less then {q} and \code{j} must be less then {p}.

void unity_zpq_coeff_set_ui(unity_zpq value, ulong i, ulong j, ulong x)

    Sets the coefficient of the $\zeta_q^i*\zeta_p^j$ equal to x.
    \code{i} must be less then {q} and \code{j} must be less then {p}.

void unity_zpq_coeff_add(unity_zpq value, ulong i, ulong j, const fmpz_t x)

    Sets $a$ in $a*\zeta_p^i*\zeta_q^j$ to $a + x$.

void unity_zpq_add(unity_zpq result, const unity_zpq left, const unity_zpq right)

    Sets the \code{result} to the \code{left}+\code{right}.
    \code{result}, \code{left} and \code{right} must be initialized with same
    \code{q}, \code{p} and \code{n}.

void unity_zpq_mul(unity_zpq result, const unity_zpq left, const unity_zpq right)

    Sets the \code{result} to the \code{left}*\code{right}.
    \code{result}, \code{left} and \code{right} must be initialized with same
    \code{q}, \code{p} and \code{n}.

void unity_zpq_pow(unity_zpq f, unity_zpq g, const fmpz_t p)

    Sets the $f$ to $g^p$. $f$ and $g$ must be initialized with same $p$, $q$ and $n$.

void unity_zpq_pow_ui(unity_zpq f, unity_zpq g, ulong p)

    Sets the $f$ to $g^p$. $f$ and $g$ must be initialized with same $p$, $q$ and $n$.



