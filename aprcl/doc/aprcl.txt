/*=============================================================================

    This file is part of FLINT.

    FLINT is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.

    FLINT is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with FLINT; if not, write to the Free Software
    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301 USA

=============================================================================*/
/******************************************************************************

    Copyright (C) 2015 Vladimir Glazachev

******************************************************************************/

*******************************************************************************

    Primality test functions

*******************************************************************************

primality_test_status _is_prime_gauss(const fmpz_t n, const aprcl_config config)

    Test $n$ for primality with fixed \code{config}. Possible return values:
        - PRIME - if $n$ prime
        - COMPOSITE - if $n$ composite
        - PROBABPRIME - if $n$ still can be prime. This happens if we can't
        verify condition (1) of Theorem 4.2 of "Four primality testing algorithms"
        for selected $R$ and $s$ values.

int is_prime_gauss(const fmpz_t n)

    If $n$ exactly prime returns 1; otherwise returns 0.
    In function used Cyclotomic primality testing algorithm discribed in 
    "Four primality testing algorithms" by Rene Schoof. 
    The minimum required numbers $s$ and $R$ computed automatically. 
    By default $R >= 180$. In some cases returns 0 for prime numbers. 
    It means that we select too small R value. To find this case 
    \code{_is_prime_gauss} function can be used.

is_prime_gauss_min_R(const fmpz_t n, ulong R)

    Same as \code{is_prime_gauss} function with fixed minimum value of $R$.

int is_prime_final_division(const fmpz_t n, const fmpz_t s, ulong r)

    Returns 0 if for some a = n^k mod s, where k from 1 to r - 1 we have that 
    a | n; otherwise returns 1.


*******************************************************************************

    Preparation functions

*******************************************************************************

mp_ptr f_table(const ulong q)

    Returns a table of the function $f: \{1,2,...,q-2\}\rightarrow\{1,2,...,q-2\}$
    defined by $1 - g^x \equiv  gf(x) \bmod q$, 
    there $g$ is a primitive root modulo $q$. f_table[x - 1] = f(x).

void aprcl_config_init(aprcl_config conf, const fmpz_t n)

    Compute the $s$ and $R$ values used in cyclotomic primality test.
    $s^2 > n$ and $s=\prod\limits_{\substack{q-1|R \\ q \text{ prime}}}q$.
    Also store factors of $R$ and $s$.

void aprcl_config_init_min_R(aprcl_config conf, const fmpz_t n, ulong R)

    Compute the $s$ with fixed minimum $R$.

void aprcl_config_clear(aprcl_config conf)

    Clears the given \code{aprcl_config} element. It must be reinitialised in
    order to be used again.


*******************************************************************************

    Operations in $\mathbb{Z}[\zeta_q, \zeta_p] / (n)$.

*******************************************************************************

void unity_zpq_init(unity_zpq value, ulong q, ulong p, const fmpz_t n)

    Initialized \code{unity_zpq} element of $\mathbb{Z}[\zeta_q, \zeta_p] / (n)$.
    \code{unity_zpq} is an array of fmpz_mod_poly_t elements.

void unity_zpq_clear(unity_zpq value)

    Clears the given \code{unity_zpq} element. It must be reinitialised in
    order to be used again.

void unity_zpq_copy(unity_zpq f, const unity_zpq g)

    Sets $f$ to $g$. $f$ and $g$ must be initialized with same $p$, $q$ and $n$.

void unity_zpq_swap(unity_zpq f, unity_zpq q)

    Swaps $f$ and $g$. $f$ and $g$ must be initialized with same $p$, $q$ and $n$.

int unity_zpq_equal(const unity_zpq f, const unity_zpq g)

    Returns non zero value if $f == g$.

ulong unity_zpq_p_unity(const unity_zpq f)

    If $f = \zeta_p^x$ returns $x in [0, p - 1]$; otherwise returns $f->p$. 

int unity_zpq_is_p_unity(const unity_zpq f)

    Returns non zero value if $f = \zeta_p^x$.

int unity_zpq_is_p_unity_generator(const unity_zpq f)

    Returns non zero value if $f$ is a generator of $<\zeta_p>$ cyclic group.

void unity_zpq_coeff_set_fmpz(unity_zpq value, ulong i, ulong j, const fmpz_t x)

    Sets the coefficient of the $\zeta_q^i*\zeta_p^j$ equal to x.
    \code{i} must be less then {q} and \code{j} must be less then {p}.

void unity_zpq_coeff_set_ui(unity_zpq value, ulong i, ulong j, ulong x)

    Sets the coefficient of the $\zeta_q^i*\zeta_p^j$ equal to x.
    \code{i} must be less then {q} and \code{j} must be less then {p}.

void unity_zpq_coeff_add(unity_zpq value, ulong i, ulong j, const fmpz_t x)

    Sets $a$ in $a*\zeta_p^i*\zeta_q^j$ to $a + x$. $x$ must be less then $n$.

void unity_zpq_add(unity_zpq result, const unity_zpq left, const unity_zpq right)

    Sets the \code{result} to the \code{left}+\code{right}.
    \code{result}, \code{left} and \code{right} must be initialized with same
    \code{q}, \code{p} and \code{n}.

void unity_zpq_mul(unity_zpq result, const unity_zpq left, const unity_zpq right)

    Sets the \code{result} to the \code{left}*\code{right}.
    \code{result}, \code{left} and \code{right} must be initialized with same
    \code{q}, \code{p} and \code{n}.

void _unity_zpq_mul_unity_p(unity_zpq f)

    Sets $f = f * \zeta_p$.

void unity_zpq_mul_unity_p_pow(unity_zpq f, const unity_zpq g, ulong k)

    Sets $f$ to $g * \zeta_p^k$.

void unity_zpq_pow(unity_zpq f, unity_zpq g, const fmpz_t p)

    Sets the $f$ to $g^p$. $f$ and $g$ must be initialized with same $p$, $q$ and $n$.

void unity_zpq_pow_ui(unity_zpq f, unity_zpq g, ulong p)

    Sets the $f$ to $g^p$. $f$ and $g$ must be initialized with same $p$, $q$ and $n$.

void unity_zpq_gauss_sum(unity_zpq value, ulong q, ulong p)

    Sets $value = \tau(\chi_{p, q})$.

void unity_zpq_gauss_sum_sigma_pow(unity_zpq value, ulong q, ulong p)

    Sets $value = \tau^{\sigma_n}(\chi_{p, q})$.

*******************************************************************************

    Operations in $\mathbb{Z}[\zeta_p] / (n)$.

*******************************************************************************

void unity_zp_init(unity_zp value, ulong p, const fmpz_t n)

    Initialized \code{unity_zp} element of $\mathbb{Z}[\zeta_p] / (n)$.

void unity_zp_clear(unity_zp value)

    Clears the given \code{unity_zp} element. It must be reinitialised in
    order to be used again.

void unity_zp_copy(unity_zp f, const unity_zp g)

    Sets $f$ to $g$. $f$ and $g$ must be initialized with same $p$ and $n$.

void unity_zp_swap(unity_zp f, unity_zp q)

    Swaps $f$ and $g$. $f$ and $g$ must be initialized with same $p$ and $n$.

void unity_zp_set_zero(unity_zp f)

    Sets $f = 0$.

void unity_zp_print(const unity_zp f)

    Prints the contents of the $f$.

slong unity_zp_is_unity(const unity_zp f)

    If $f = \zeta^h$ returns h; otherwise returns -1.

int unity_zp_equal(const unity_zp f, const unity_zp g)

    Returns non zero value if $f == g$ reduced by $p^exp$-th cyclotomic
    polynomial.

void unity_zp_coeff_inc(unity_zp f, ulong ind)

    Increase the coefficient at $\zeta^ind$. 
    $ind$ must be less then $p^exp$.

void unity_zp_coeff_dec(unity_zp f, ulong ind)

    Increase the coefficient at $\zeta^ind$. 
    $ind$ must be less then $p^exp$.

void unity_zp_coeff_set_fmpz(unity_zp f, ulong ind, const fmpz_t x)

    Sets the coefficient of the $\zeta^ind$ equal to x.
    $ind$ must be less then $p^exp$.

void unity_zp_coeff_set_ui(unity_zp f, ulong ind, ulong x)

    Sets the coefficient of the $\zeta^ind$ equal to x.
    $ind$ must be less then $p^exp$.

void unity_zp_coeff_add_fmpz(unity_zp f, ulong ind, const fmpz_t x)

    Sets $a$ in $a*\zeta^ind$ to $a + x$. $x$ must be less then $n$.

void unity_zp_coeff_add_ui(unity_zp f, ulong ind, ulong x)

    Sets $a$ in $a*\zeta^ind$ to $a + x$. $x$ must be less then $n$.

void unity_zp_mul_scalar_fmpz(unity_zp f, const unity_zp g, const fmpz_t s)

    Sets $f = s*g$.

void unity_zp_mul_scalar_ui(unity_zp f, const unity_zp g, ulong s)

    Sets $f = s*g$.

void unity_zp_add(unity_zp f, const unity_zp g, const unity_zp h)

    Sets the $f$ to $g + h$.
    $f$, $g$ and $h$ must be initialized with same $p$ and $n$

void unity_zp_mul(unity_zp f, const unity_zp g, const unity_zp h)

    Sets the $f$ to the $g * h$.
    $f$, $g$ and $h$ must be initialized with same $p$ and $n$

void unity_zp_pow_fmpz(unity_zp f, unity_zp g, const fmpz_t pow)

    Sets the $f$ to $g^pow$. $f$ and $g$ must be initialized with same $p$ and $n$.

void unity_zp_pow_ui(unity_zp f, unity_zp g, ulong pow)

    Sets the $f$ to $g^pow$. $f$ and $g$ must be initialized with same $p$ and $n$.

void unity_zp_pow_2k_fmpz(unity_zp f, unity_zp g, const fmpz_t pow)

    Sets the $f$ to $g^pow$ using $2^k$-ary exponentiation method.
    $f$ and $g$ must be initialized with same $p$ and $n$.

void _unity_zp_reduce_cyclotomic(unity_zp f)

    Sets $f = f mod \Phi_{p^exp}$. $\Phi_{p^exp}$ is the $p^exp$-th cyclotomic
    polynomial.

void unity_zp_reduce_cyclotomic(unity_zp f, const unity_zp g)

    Sets $f = g mod \Phi_{p^exp}$. $\Phi_{p^exp}$ is the $p^exp$-th cyclotomic
    polynomial.

void unity_zp_aut(unity_zp f, const unity_zp g, ulong x)

    Sets $f = \sigma_x(g)$, there automorphism $\sigma_x(\zeta)=\zeta^x$.

void unity_zp_aut_inv(unity_zp f, const unity_zp g, ulong x)

    Sets $f = \sigma_x^{-1}(g)$, so $\sigma_x(f) = g$. 
    $g$ must be reduced by $\Phi_{p^exp}$.

